		     +-------------------------+
		     |            OS           |
		     | PROJECT 4: FILE SYSTEMS |
		     |     DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Marco Maida <mmaida@mpi-sws.org>
Marco Perronet <perronet@mpi-sws.org>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

((11 + 65*64 + 3*64^2 - (1+65+3^2) )*512)/1024/1024

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
	...
    struct dir *curr_dir;               /* Current working directory */
    ...
  }

/* A single directory entry. */
struct dir_entry 
  {
    block_sector_t inode_sector;        /* Sector number of header. */
    char name[NAME_MAX + 1];            /* Null terminated file or directory name. */
    bool in_use;                        /* In use or free? */
    bool is_dir;                        /* Is a directory or a file? */
  };

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
  {
    block_sector_t start;               /* First data sector. */
    block_sector_t parent;				/* The directory containing the inode */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[124];               /* Not used. */
  };

/* In-memory inode. */
struct inode 
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    int open_fd_cnt;					/* Number of open fds on this dir. */
    int cwd_cnt;                        /* Number of processes that have this dir as cwd. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    struct inode_disk* data;            /* Inode content. */
  };

/* Represents an open file. */
struct file_descriptor 
{
  int fd_num;
  struct file *open_file;
  struct dir *open_dir;
  tid_t owner;
  bool is_dir;

  struct list_elem elem; 
};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

The only difference is the starting directory. For absolute paths the initial
directory is root, and for relative paths it is the current working 
directory of the process. From here, at every iteration the working directory
is changed, based on the current entry in the string, until the target directory 
is reached. Special names in the string ("." "..") are treated as special 
cases during the directory lookup: they are not actual entries in directories.
Their only effect is to change the working directory during the lookup.
For any other normal entry, a simple linear seach in the parent directory
is performed.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

TODO don't use big kernel lock on fs

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No, it is not possible to remove a directory in this situation.
struct inode keeps two counters: open_fd_cnt and cwd_cnt. They will keep count
of file descriptors that refer to the open directory, and the number of 
processes that have the directory as current working directory. If any of 
the counters is greater than zero, then the directory can't be removed.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

Because the current working directory is process-specific, it is 
represented with a field in struct thread. 
It is assumed that a directory must be open in order to be a
current working directory. Because of this, the field is of type 
struct dir*, which is used to represent open directories.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define MAX_CACHE_SECTORS 64
#define BC_DAEMON_FLUSH_SLEEP_MS 1000
#define MAX_READ_AHEAD 10

struct buffer_cache_entry
{
	block_sector_t sector;              /* Sector number of disk location. */
	char data [BLOCK_SECTOR_SIZE];		/* Data contained in the cache */
	bool is_in_second_chance;			/* Whether the entry is in second chance */			
	bool is_dirty;						/* Whether the entry is in second dirty */			

	struct list_elem elem;              /* List element. */
};


---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

To evict a block, we use a slightly modified version of the clock algorithm,
in which we always start from the top of the list, and we cycle looking 
for an entry in a second chance fashion. Since we always start from the beginning,
but newly added entries and recently referenced ones are moved to the end, 
we have an implicit mechanism of aging going on. On top of this, during the first iteration,
the dirty entries will be ignored. This is done because evicting a dirty
entry is more expensive.

>> C3: Describe your implementation of write-behind.

Entries are not flushed upon write, but rather upon eviction, or periodically 
by the flush daemon. We use a dirty bit in order to decide whether an entry 
should be flushed or not. 

>> C4: Describe your implementation of read-ahead.

We use a queue of read-ahead requests, bounded with a maximum of 10 requests.
The read ahead daemon will periodically check for requests, but without busy-waiting.
Instead, a semaphore is used: the daemon blocks on the semaphore, and every time a 
new request is issued, the semaphore is unlocked. The requests are issued from
inode_read_at (...). After reading one block, if the next one is in the inode and
needs to be read, then an asynchronous request for a read-ahead is issued.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

We use a lock (cache_lock) for both reading and writing a cache block.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

The same lock protects also the eviction code because it is executed
upon cache miss when reading and writing.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer caching can benefit, for example, a text editor workflow: after
loading a file, the same blocks will be accessed upon saving.

Read-ahead can be very useful when copying large files 
because every read, except the first and last one, will be anticipated.

Write-behind benefits programs that write to the same blocks many times
in a short timespan.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
 
