        +---------------------------+
        |             OS            |
        | PROJECT 3: VIRTUAL MEMORY |
        |      DESIGN DOCUMENT      |
        +---------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Marco Maida <mmaida@mpi-sws.org> 416157
Marco Perronet <perronet@mpi-sws.org> 416159

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
{
  ...
  struct hash pt_suppl;          /* Local suppl page table */
  struct lock pt_suppl_lock;     /* Local suppl page table lock*/
  ...
};

struct pt_suppl_entry
{
  void *vaddr;
  enum pt_status status;
  size_t swap_slot;
  struct pt_suppl_file_info *file_info;

  struct hash_elem elem;
};

Entry in the supplemental page table

struct pt_suppl_file_info
{
  struct file *file;
  struct thread *owner;
  int map_id;
  off_t offset;
  uint32_t read_bytes;
  uint32_t zero_bytes;
  bool writable;
};

Entry for memory mapped files: it is embedded in the entry for the supplemental
page table and is non-NULL if the page is for a memory mapped file

enum pt_status
{
  MMF_UNLOADED  = MMF     | UNLOADED,
  MMF_PRESENT   = MMF     | PRESENT,
  MMF_SWAPPED   = MMF     | SWAPPED,

  LAZY_UNLOADED = LAZY    | UNLOADED,
  LAZY_PRESENT  = LAZY    | PRESENT,
  LAZY_SWAPPED  = LAZY    | SWAPPED,
};

Status of the page in the supplemental page table: can be either a memory mapped
file or a segment/code page.
The actual data can be on disk, on the swap partition or loaded in memory. 

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

The frame table is a hash table indexed by the page. We simply access 
the hash table, checking for null.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

The issue is avoided by accessing the frame with the user's vaddr also
during system calls.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Processes synchronize on the lock of the frame table (frame_hash_lock).

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Via a hash table, we can have (amortized) O(1) complexity. We
almost never have to access the table in a different way than
indexing by page, and when we have to, using another data structure
wouldn't have changed anything.
In the page table, we can distinguish between pages by defining the
less function as a case split. This creates a partial order, but
we can simply return true when elements are incomparable. 

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define MAX_STACK (8 * (1<<20)); //8MB
Max stack constant

struct frame_entry
{
  void *page;
  struct thread *owner;
  void *thread_vaddr;

  struct hash_elem elem;
};
Entry in the frame table


static struct hash frame_hash; //Global frame table
static struct lock frame_hash_lock; //Frame table's lock


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

It's a simple implementation of the clock algorithm. The frame table is inspected
circularly and by exploiting the "accessed" bit in the pagedir
the frame to evict is chosen according to the algorithm.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

The victim's page is swapped to disk or, 
in the case that the page is of a memory mapped file, written to file.
The status of the page in the supplemental page table is changed accordingly
(LAZY_SWAPPED or MMF_UNLOADED, respectively), and the entry of the page in the
pagedir is removed.
Finally, the "owner" field of the victim's frame table entry is 
changed from Q to P.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Given a valid address (PHYS_BASE bounds checked), the stack is extended 
if the invalid virtual address does not exceed the stack pointer by more 
than 32 bytes. We also check for stack overflows (variable MAX_STACK).

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
VM synchronization is achieved via a number of different locks, namely
- Frame lock (FL)
- Swap lock (SL)
- File system lock (FSL)
- Local suppl page table lock (PTL)

Since our supplemental page table is local per process, we only have to 
synchronize in case of swapping. In all other cases, accesses to the
supplemental page table is done only by its owner.
The frame table is guarded by its own lock, since it is global.
Swapping operations need to be atomic, because we cannot run two clock
algorithms together.
In order to prevent deadlock, we eliminated the possibility of a loop in
the dependency cycle. The possible orders of acquisitions are
- FL -> SL -> FSL -> PTL
- SL -> FSL -> PTL
- FSL -> PTL
- PTL

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Let's start by stating that two evictions cannot happen at the same time.
This leaves the cases of page accessed and page fault. Since, when swapping,
the address is removed from the pagedir, we only need to face concurrent
page faults and evictions. This is solved with the previously exaplained locks.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

In order to perform an eviction, a process needs to get the Frame lock and
the Swap lock. Since this is the case, Q is not able to evict the page while
P is holding the Frame lock. 

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

When handling syscalls, some checks are performed to ensure that the
given address is valid. The core of this is in thread.c, when executing
is_valid_address_of_thread(). This function has been updated to consider
also the cases of swapped and lazy loaded pages. After the usual checks,
the code checks that the given address is present in the supplemental
page table. If it is so, and the write permissions are fine, then it 
allows the kernel to page fault. 

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

As already explained in B5, our system is pretty granular. VM is 
synchronized with (num_thread + 3) different locks. We decided to go for
this design to avoid a Big Kernel Lock situation, in which VM handling is
totally parallelized. This opens a number of problems, whose solutions
are described in the previous answers.
The reason for this choice is parallelism. E.g. it is nonsensical to lock the
frame table if all we are doing is setting up lazy loading for a file.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct pt_suppl_entry
{
  void *vaddr;
  enum pt_status status;
  size_t swap_slot;
  struct pt_suppl_file_info *file_info;

  struct hash_elem elem;
};

Entry in the supplemental page table

struct pt_suppl_file_info
{
  struct file *file;
  struct thread *owner;
  int map_id;
  off_t offset;
  uint32_t read_bytes;
  uint32_t zero_bytes;
  bool writable;
};

Entry for memory mapped files: it is embedded in the entry for the supplemental
page table and is non-NULL if the page is for a memory mapped file

enum pt_status
{
  MMF_UNLOADED  = MMF     | UNLOADED,
  MMF_PRESENT   = MMF     | PRESENT,
  MMF_SWAPPED   = MMF     | SWAPPED,

  LAZY_UNLOADED = LAZY    | UNLOADED,
  LAZY_PRESENT  = LAZY    | PRESENT,
  LAZY_SWAPPED  = LAZY    | SWAPPED,
};

Status of the page in the supplemental page table: can be either a memory mapped
file or a normal page, and each can be on disk, on the swap partition
or loaded in memory

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

MM files are stored inside the supplemental page table, just like
lazy loaded pages. The status enum stores the type of the page, as well
as its presence on RAM. When mmapping, an entry is created for each page
of the file (size/PGSIZE) and set to the UNLOADED status. Actual reading is
performed during a page fault.
If the page is for a memory mapped file, then the field "file_info" in the 
entry is non-NULL. When swapping, if the page is for a memory mapped file,
the page is written to disk rather than the swap partition.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

In pt_suppl_handle_mmap in page.c: every time a page is mapped, it's enough
to check if there is already a page of the process mapped at that address. 
If the mapping overlaps, mmap fails.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Most of the code is shared, the only difference is a case split in
page_out_evicted_frame in frame.c. The frame can be either a normal
frame or a frame of a memory mapped file.
The rest of the underlying infrastructure is shared. 
This is also thanks to the fact that the we keep both files in a per-thread
table. We can distinguish between the two (when needed) with the status field.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
 
